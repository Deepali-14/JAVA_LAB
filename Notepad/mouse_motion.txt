
5. mousemotion


import java.awt.*;
import java.awt.event.*;
 
public class MouseMotionDemo extends Frame implements MouseMotionListener
{
  public MouseMotionDemo()
  {                                                            
    addMouseMotionListener(this);                // link the frame with MML
    setSize(300,300);
    setVisible(true);
  }
                                  // override the 2 abstract methods of MML 
  public void mouseMoved(MouseEvent e)
  {
    setBackground(Color.red);
    System.out.println("Mouse is Moved");
  }
  public void mouseDragged(MouseEvent e)
  {
    setBackground(Color.blue);
    System.out.println("Mouse is Dragged");
  }
  public static void main(String args[])
  {
    new MouseMotionDemo();
  }
}




import java.awt.*;  
import java.awt.event.*;  
public class mouselistener extends Frame implements MouseListener{  
    Label l;  
    mouselistener(){  
        addMouseListener(this);  
          
        l=new Label();  
        l.setBounds(20,50,100,20);  
        add(l);  
        setSize(300,300);  
        setLayout(null);  
        setVisible(true);  
    }  
    public void mouseClicked(MouseEvent e) {  
        l.setText("Mouse Clicked");  
    }  
    public void mouseEntered(MouseEvent e) {  
        l.setText("Mouse Entered");  
    }  
    public void mouseExited(MouseEvent e) {  
        l.setText("Mouse Exited");  
    }  
    public void mousePressed(MouseEvent e) {  
        l.setText("Mouse Pressed");  
    }  
    public void mouseReleased(MouseEvent e) {  
        l.setText("Mouse Released");  
    }  
public static void main(String[] args) {  
    new mouselistener();  
}  
}  



import java.awt.*;
import java.awt.event.*;
 
public class MouseXY extends Frame implements MouseListener, MouseMotionListener
{
  int x, y;
  String str="";
  
  public MouseXY()
  {
    addMouseListener(this);
    addMouseMotionListener(this);
 
    setSize(300, 300);
    setVisible(true);
  } 
                                     // override ML five abstract methods
  public void mousePressed(MouseEvent e)
  {
    x = e.getX();
    y = e.getY();
    str = "Mouse Pressed";
    repaint();
  }
  public void mouseReleased(MouseEvent e)
  {
    x = e.getX();
    y = e.getY();
    str = "Mouse Released";
    repaint();
  }
  public void mouseClicked(MouseEvent e)
  {
    x = e.getX();
    y = e.getY();
    str = "Mouse Clicked";
    repaint();
  }
  public void mouseEntered(MouseEvent e)
  {
    x = e.getX();
    y = e.getY();
    str = "Mouse Entered";
    repaint();
  }
  public void mouseExited(MouseEvent e)
  {
    x = e.getX();
    y = e.getY();
    str = "Mouse Exited";
    repaint();
  }
                                       // override MML two abstract methods
  public void mouseMoved(MouseEvent e)
  {
    x = e.getX();
    y = e.getY();
    str = "Mouse Moved";
    repaint();
  }
  public void mouseDragged(MouseEvent e)
  {
    x = e.getX();
    y = e.getY();
    str = "Mouse dragged";
    repaint();
  }
  public void paint(Graphics g)
  {
    g.setFont(new Font("Monospaced", Font.BOLD, 20));
    g.fillOval(x, y, 10, 10);
    g.drawString(x + "," + y,  x+10, y -10);
    g.drawString(str, x+10, y+20);
  }
  public static void main(String args[])
  {
    new MouseXY();
  }
}


//NOTE: getX() and getY() methods of MouseEvent class return the x and y coordinates 
//where the mouse action taken place. With fillOval() method of Graphics class 
//a disc is drawn on the frame and with drawString() method , 
//two strings are drawn of x and y coordinates and the type of action taken.



-------------------------------

---------------------


--------------------
7.traffic

import java.awt.*;
import java.awt.event.*;
class ch extends Frame implements ItemListener
{
    Panel p;
    CheckboxGroup cg;
        Checkbox  c1,c2,c3;
        Label l=new Label();
    ch()
    {
        CheckboxGroup cg=new CheckboxGroup();
        c1=new Checkbox("RED",cg,false);
        c2=new Checkbox("YELOW",cg,false);
        c3=new Checkbox("GREEN",cg,false);
        
        p=new Panel();
        add(p);
        p.add(c1);
        p.add(l);
        c1.addItemListener(this);
        p.add(c2);
        c2.addItemListener(this);
        p.add(c3);
        c3.addItemListener(this);        
        p.setBackground(Color.gray);
    }
    public void itemStateChanged(ItemEvent e)
    {
        if(e.getSource()==c1)
        {
            l.setText("Stop");
            p.add(l);
            p.setBackground(Color.red);
            c2.setState(false);
            c3.setState(false);
        }
        else if(e.getSource()==c2)
        {
             l.setText("Ready");
            p.add(l);
            p.setBackground(Color.yellow);
            c1.setState(false);
            c3.setState(false);
        }
            
        else if(e.getSource()==c3)
        {                    
            l.setText("Go");
//            l.setForeground(Color.red);
            p.add(l);
            p.setBackground(Color.green);
            c1.setState(false);
            c2.setState(false);
        }

    }
}

public class checkbox 
{
    public static void main(String[] args) 
    {
        ch c=new ch();
        c.setVisible(true);
        c.setSize(500,600);
        c.setLocation(100, 100);   
    }
    
}
